{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ const $a5fd07fa01589658$var$randomizer = (state)=>{\n    const stateRow = Math.floor(Math.random() * 4);\n    const stateColumn = Math.floor(Math.random() * 4);\n    if (state[stateRow][stateColumn] === 0) return [\n        stateRow,\n        stateColumn\n    ];\n    else return $a5fd07fa01589658$var$randomizer(state);\n};\nconst $a5fd07fa01589658$var$randomNumber = ()=>{\n    const random = Math.floor(Math.random() * 10) + 1;\n    if (random <= 1) return 4;\n    else return 2;\n};\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.score = 0;\n        this.status = \"none\";\n    }\n    async gameAdderItem(addWith = \"\") {\n        const startGameAdder = async ()=>{\n            const [stateRow, stateColumn] = $a5fd07fa01589658$var$randomizer(this.initialState);\n            this.initialState[stateRow][stateColumn] = $a5fd07fa01589658$var$randomNumber();\n        };\n        const isItemsZero = this.initialState.reduce((prevItem, currentItem)=>{\n            return prevItem + currentItem.reduce((prevItem1, currentItem1)=>{\n                return prevItem1 + (currentItem1 === 0 ? 1 : 0);\n            }, 0);\n        }, 0);\n        if (addWith === \"start\") {\n            await startGameAdder();\n            await startGameAdder();\n        } else if (isItemsZero >= 1) await startGameAdder();\n    }\n    async moveLeft() {\n        const tempState = this.initialState;\n        const goToLeft = async ()=>{\n            this.initialState = this.initialState.map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                const result = [\n                    ...numberItem,\n                    ...zeroItem\n                ];\n                for(let i = 0; i < 3; i++)if (result[i] === result[i + 1] && result[i] !== 0) {\n                    result[i] = result[i] + result[i + 1];\n                    this.score += result[i];\n                    result[i + 1] = 0;\n                    i = i + 1;\n                }\n                return result;\n            });\n        };\n        const goToLefttLast = async ()=>{\n            this.initialState = this.initialState.map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                return [\n                    ...numberItem,\n                    ...zeroItem\n                ];\n            });\n        };\n        await goToLeft();\n        await goToLefttLast();\n        if (tempState.toString() === this.initialState.toString()) return;\n        await this.gameAdderItem();\n    }\n    async moveRight() {\n        const tempState = this.initialState;\n        const goToRight = async ()=>{\n            this.initialState = this.initialState.map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                const result = [\n                    ...zeroItem,\n                    ...numberItem\n                ];\n                for(let i = 3; i > 0; i--)if (result[i] === result[i - 1] && result[i] !== 0) {\n                    result[i] = result[i] + result[i - 1];\n                    this.score += result[i];\n                    result[i - 1] = 0;\n                    i = i - 1;\n                }\n                return result;\n            });\n        };\n        const goToRightLast = async ()=>{\n            this.initialState = this.initialState.map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                return [\n                    ...zeroItem,\n                    ...numberItem\n                ];\n            });\n        };\n        await goToRight();\n        await goToRightLast();\n        if (tempState.toString() === this.initialState.toString()) return;\n        await this.gameAdderItem();\n    }\n    async moveUp() {\n        const tempState = this.initialState;\n        const goToTop = async ()=>{\n            const columnsItems = [\n                this.initialState.map((item)=>item[0]),\n                this.initialState.map((item)=>item[1]),\n                this.initialState.map((item)=>item[2]),\n                this.initialState.map((item)=>item[3])\n            ].map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                const result = [\n                    ...numberItem,\n                    ...zeroItem\n                ];\n                for(let i = 0; i < 3; i++)if (result[i] === result[i + 1] && result[i] !== 0) {\n                    result[i] = result[i] + result[i + 1];\n                    this.score += result[i];\n                    result[i + 1] = 0;\n                    i = i + 1;\n                }\n                return result;\n            });\n            this.initialState = [\n                columnsItems.map((item)=>item[0]),\n                columnsItems.map((item)=>item[1]),\n                columnsItems.map((item)=>item[2]),\n                columnsItems.map((item)=>item[3])\n            ];\n        };\n        const goToTopLast = async ()=>{\n            const columnsItems = [\n                this.initialState.map((item)=>item[0]),\n                this.initialState.map((item)=>item[1]),\n                this.initialState.map((item)=>item[2]),\n                this.initialState.map((item)=>item[3])\n            ].map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                return [\n                    ...numberItem,\n                    ...zeroItem\n                ];\n            });\n            this.initialState = [\n                columnsItems.map((item)=>item[0]),\n                columnsItems.map((item)=>item[1]),\n                columnsItems.map((item)=>item[2]),\n                columnsItems.map((item)=>item[3])\n            ];\n        };\n        await goToTop();\n        await goToTopLast();\n        if (tempState.toString() === this.initialState.toString()) return;\n        await this.gameAdderItem();\n    }\n    async moveDown() {\n        const tempState = this.initialState;\n        const goToDown = async ()=>{\n            const columnsItems = [\n                this.initialState.map((item)=>item[0]),\n                this.initialState.map((item)=>item[1]),\n                this.initialState.map((item)=>item[2]),\n                this.initialState.map((item)=>item[3])\n            ].map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                const result = [\n                    ...zeroItem,\n                    ...numberItem\n                ];\n                for(let i = 3; i > 0; i--)if (result[i] === result[i - 1] && result[i] !== 0) {\n                    result[i] = result[i] + result[i - 1];\n                    this.score += result[i];\n                    result[i - 1] = 0;\n                    i = i - 1;\n                }\n                return result;\n            });\n            this.initialState = [\n                columnsItems.map((item)=>item[0]),\n                columnsItems.map((item)=>item[1]),\n                columnsItems.map((item)=>item[2]),\n                columnsItems.map((item)=>item[3])\n            ];\n        };\n        const goToDownLast = async ()=>{\n            const columnsItems = [\n                this.initialState.map((item)=>item[0]),\n                this.initialState.map((item)=>item[1]),\n                this.initialState.map((item)=>item[2]),\n                this.initialState.map((item)=>item[3])\n            ].map((item, index)=>{\n                const zeroItem = item.filter((num)=>num === 0);\n                const numberItem = item.filter((num)=>num !== 0);\n                return [\n                    ...zeroItem,\n                    ...numberItem\n                ];\n            });\n            this.initialState = [\n                columnsItems.map((item)=>item[0]),\n                columnsItems.map((item)=>item[1]),\n                columnsItems.map((item)=>item[2]),\n                columnsItems.map((item)=>item[3])\n            ];\n        };\n        await goToDown();\n        await goToDownLast();\n        if (tempState.toString() === this.initialState.toString()) return;\n        await this.gameAdderItem();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.initialState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ setStatus() {\n        if (this.initialState.some((items)=>items.includes(2048))) {\n            if (this.status !== \"win\") this.status = \"win\";\n            return this.status;\n        }\n        let isGamingTime = false;\n        this.initialState.forEach((item, index)=>{\n            const zeroItem = item.filter((num)=>num === 0);\n            const numberItem = item.filter((num)=>num !== 0);\n            const result = [\n                ...numberItem,\n                ...zeroItem\n            ];\n            for(let i = 0; i < 3; i++)if (result[i] === result[i + 1] && result[i] !== 0) isGamingTime = true;\n            for(let i = 3; i > 0; i--)if (result[i] === result[i - 1] && result[i] !== 0) isGamingTime = true;\n        });\n        [\n            this.initialState.map((item)=>item[0]),\n            this.initialState.map((item)=>item[1]),\n            this.initialState.map((item)=>item[2]),\n            this.initialState.map((item)=>item[3])\n        ].forEach((item, index)=>{\n            const zeroItem = item.filter((num)=>num === 0);\n            const numberItem = item.filter((num)=>num !== 0);\n            const result = [\n                ...numberItem,\n                ...zeroItem\n            ];\n            for(let i = 0; i < 3; i++)if (result[i] === result[i + 1] && result[i] !== 0) isGamingTime = true;\n            for(let i = 3; i > 0; i--)if (result[i] === result[i - 1] && result[i] !== 0) isGamingTime = true;\n        });\n        this.initialState.forEach((item)=>{\n            if (item.includes(0)) isGamingTime = true;\n        });\n        if (isGamingTime) return this.status;\n        this.status = \"lose\";\n        return this.status;\n    }\n    getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ async start() {\n        await this.gameAdderItem(\"start\");\n        this.status = \"start\";\n    }\n    /**\n   * Resets the game.\n   */ async restart() {\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.start();\n        this.score = 0;\n        this.status = \"start\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports([\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\nconst $09e991522ca7e64e$var$rows = Array.from(document.querySelectorAll(\".field-row\")).map((row)=>{\n    return Array.from(row.querySelectorAll(\".field-cell\"));\n});\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$isLoser = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$isWiner = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$isStarter = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$setAllGameBoard = async ()=>{\n    const itemsFromGame = $09e991522ca7e64e$var$game.getState();\n    const statusGame = $09e991522ca7e64e$var$game.setStatus();\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$rows.map((row, indexRow)=>{\n        return row.map((itemField, intexItemField)=>{\n            itemField.textContent = itemsFromGame[indexRow][intexItemField] ? itemsFromGame[indexRow][intexItemField] : \"\";\n            itemField.className = itemsFromGame[indexRow][intexItemField] ? `field-cell field-cell--${itemsFromGame[indexRow][intexItemField]}` : \"field-cell\";\n        });\n    });\n    switch(statusGame){\n        case \"none\":\n            if ($09e991522ca7e64e$var$isLoser.className !== \"message message-lose hidden\") $09e991522ca7e64e$var$isLoser.className = \"message message-lose hidden\";\n            if ($09e991522ca7e64e$var$isWiner.className !== \"message message-win hidden\") $09e991522ca7e64e$var$isWiner.className = \"message message-win hidden\";\n            if ($09e991522ca7e64e$var$isStarter.className !== \"message message-start\") $09e991522ca7e64e$var$isStarter.className = \"message message-start\";\n            break;\n        case \"start\":\n            if ($09e991522ca7e64e$var$isLoser.className !== \"message message-lose hidden\") $09e991522ca7e64e$var$isLoser.className = \"message message-lose hidden\";\n            if ($09e991522ca7e64e$var$isWiner.className !== \"message message-win hidden\") $09e991522ca7e64e$var$isWiner.className = \"message message-win hidden\";\n            if ($09e991522ca7e64e$var$isStarter.className !== \"message message-start hidden\") $09e991522ca7e64e$var$isStarter.className = \"message message-start hidden\";\n            break;\n        case \"lose\":\n            if ($09e991522ca7e64e$var$isLoser.className !== \"message message-lose\") $09e991522ca7e64e$var$isLoser.className = \"message message-lose\";\n            if ($09e991522ca7e64e$var$isWiner.className !== \"message message-win hidden\") $09e991522ca7e64e$var$isWiner.className = \"message message-win hidden\";\n            if ($09e991522ca7e64e$var$isStarter.className !== \"message message-start hidden\") $09e991522ca7e64e$var$isStarter.className = \"message message-start hidden\";\n            break;\n        case \"win\":\n            if ($09e991522ca7e64e$var$isLoser.className !== \"message message-lose hidden\") $09e991522ca7e64e$var$isLoser.className = \"message message-lose hidden\";\n            if ($09e991522ca7e64e$var$isWiner.className !== \"message message-win\") $09e991522ca7e64e$var$isWiner.className = \"message message-win\";\n            if ($09e991522ca7e64e$var$isStarter.className !== \"message message-start hidden\") $09e991522ca7e64e$var$isStarter.className = \"message message-start hidden\";\n            break;\n        default:\n            break;\n    }\n};\nconst $09e991522ca7e64e$var$start = document.querySelector(\".button\");\n$09e991522ca7e64e$var$start.addEventListener(\"click\", async ()=>{\n    if ($09e991522ca7e64e$var$start.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$start.classList.remove(\"start\");\n        $09e991522ca7e64e$var$start.classList.add(\"restart\");\n        $09e991522ca7e64e$var$start.textContent = \"Restart\";\n        await $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$setAllGameBoard();\n    } else {\n        await $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$setAllGameBoard();\n    }\n});\nlet $09e991522ca7e64e$var$isUseEventListener = true;\nconst $09e991522ca7e64e$var$moverGame = async (moveToGamePosition)=>{\n    $09e991522ca7e64e$var$isUseEventListener = false;\n    await $09e991522ca7e64e$var$game[moveToGamePosition]();\n    await $09e991522ca7e64e$var$setAllGameBoard();\n    $09e991522ca7e64e$var$isUseEventListener = true;\n};\ndocument.documentElement.addEventListener(\"keydown\", async function(evenet) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"start\" || !$09e991522ca7e64e$var$isUseEventListener) return;\n    switch(evenet.key){\n        case \"ArrowRight\":\n            await $09e991522ca7e64e$var$moverGame(\"moveRight\");\n            break;\n        case \"ArrowLeft\":\n            await $09e991522ca7e64e$var$moverGame(\"moveLeft\");\n            break;\n        case \"ArrowUp\":\n            await $09e991522ca7e64e$var$moverGame(\"moveUp\");\n            break;\n        case \"ArrowDown\":\n            await $09e991522ca7e64e$var$moverGame(\"moveDown\");\n            break;\n        default:\n            break;\n    }\n});\nlet $09e991522ca7e64e$var$startPositionX, $09e991522ca7e64e$var$startPositionY;\nconst $09e991522ca7e64e$var$gameBoard = document.querySelector(\".game-field\");\n$09e991522ca7e64e$var$gameBoard.addEventListener(\"touchstart\", function(evenet) {\n    $09e991522ca7e64e$var$startPositionX = evenet.touches[0].clientX;\n    $09e991522ca7e64e$var$startPositionY = event.touches[0].clientY;\n});\n$09e991522ca7e64e$var$gameBoard.addEventListener(\"touchmove\", async function(evenet) {\n    evenet.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"start\" || !$09e991522ca7e64e$var$isUseEventListener) return;\n    const currentX = evenet.touches[0].clientX;\n    const currentY = evenet.touches[0].clientY;\n    const diffX = currentX - $09e991522ca7e64e$var$startPositionX;\n    const diffY = currentY - $09e991522ca7e64e$var$startPositionY;\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n        if (diffX > 50) {\n            await $09e991522ca7e64e$var$moverGame(\"moveRight\");\n            $09e991522ca7e64e$var$isUseEventListener = false;\n        } else if (diffX < -50) {\n            await $09e991522ca7e64e$var$moverGame(\"moveLeft\");\n            $09e991522ca7e64e$var$isUseEventListener = false;\n        }\n    } else {\n        if (diffY > 50) {\n            await $09e991522ca7e64e$var$moverGame(\"moveDown\");\n            $09e991522ca7e64e$var$isUseEventListener = false;\n        } else if (diffY < -50) {\n            await $09e991522ca7e64e$var$moverGame(\"moveUp\");\n            $09e991522ca7e64e$var$isUseEventListener = false;\n        }\n    }\n});\n$09e991522ca7e64e$var$gameBoard.addEventListener(\"touchend\", function() {\n    $09e991522ca7e64e$var$startPositionX = null;\n    $09e991522ca7e64e$var$startPositionY = null;\n    $09e991522ca7e64e$var$isUseEventListener = true;\n});\n\n\n//# sourceMappingURL=index.c28535d3.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game([\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n]);\n\nconst rows = Array.from(document.querySelectorAll('.field-row')).map((row) => {\n  return Array.from(row.querySelectorAll('.field-cell'));\n});\n\nconst score = document.querySelector('.game-score');\nconst isLoser = document.querySelector('.message-lose');\nconst isWiner = document.querySelector('.message-win');\nconst isStarter = document.querySelector('.message-start');\n\nconst setAllGameBoard = async () => {\n  const itemsFromGame = game.getState();\n  const statusGame = game.setStatus();\n\n  score.textContent = game.getScore();\n\n  rows.map((row, indexRow) => {\n    return row.map((itemField, intexItemField) => {\n      itemField.textContent = itemsFromGame[indexRow][intexItemField]\n        ? itemsFromGame[indexRow][intexItemField]\n        : '';\n\n      itemField.className = itemsFromGame[indexRow][intexItemField]\n        ? `field-cell field-cell--${itemsFromGame[indexRow][intexItemField]}`\n        : 'field-cell';\n    });\n  });\n\n  switch (statusGame) {\n    case 'none': {\n      if (isLoser.className !== 'message message-lose hidden') {\n        isLoser.className = 'message message-lose hidden';\n      }\n\n      if (isWiner.className !== 'message message-win hidden') {\n        isWiner.className = 'message message-win hidden';\n      }\n\n      if (isStarter.className !== 'message message-start') {\n        isStarter.className = 'message message-start';\n      }\n\n      break;\n    }\n\n    case 'start': {\n      if (isLoser.className !== 'message message-lose hidden') {\n        isLoser.className = 'message message-lose hidden';\n      }\n\n      if (isWiner.className !== 'message message-win hidden') {\n        isWiner.className = 'message message-win hidden';\n      }\n\n      if (isStarter.className !== 'message message-start hidden') {\n        isStarter.className = 'message message-start hidden';\n      }\n\n      break;\n    }\n\n    case 'lose': {\n      if (isLoser.className !== 'message message-lose') {\n        isLoser.className = 'message message-lose';\n      }\n\n      if (isWiner.className !== 'message message-win hidden') {\n        isWiner.className = 'message message-win hidden';\n      }\n\n      if (isStarter.className !== 'message message-start hidden') {\n        isStarter.className = 'message message-start hidden';\n      }\n\n      break;\n    }\n\n    case 'win': {\n      if (isLoser.className !== 'message message-lose hidden') {\n        isLoser.className = 'message message-lose hidden';\n      }\n\n      if (isWiner.className !== 'message message-win') {\n        isWiner.className = 'message message-win';\n      }\n\n      if (isStarter.className !== 'message message-start hidden') {\n        isStarter.className = 'message message-start hidden';\n      }\n\n      break;\n    }\n\n    default:\n      break;\n  }\n};\n\nconst start = document.querySelector('.button');\n\nstart.addEventListener('click', async () => {\n  if (start.classList.contains('start')) {\n    start.classList.remove('start');\n    start.classList.add('restart');\n    start.textContent = 'Restart';\n    await game.start();\n    setAllGameBoard();\n  } else {\n    await game.restart();\n    setAllGameBoard();\n  }\n});\n\nlet isUseEventListener = true;\n\nconst moverGame = async (moveToGamePosition) => {\n  isUseEventListener = false;\n  await game[moveToGamePosition]();\n  await setAllGameBoard();\n  isUseEventListener = true;\n};\n\ndocument.documentElement.addEventListener('keydown', async function (evenet) {\n  if (game.getStatus() !== 'start' || !isUseEventListener) {\n    return;\n  }\n\n  switch (evenet.key) {\n    case 'ArrowRight': {\n      await moverGame('moveRight');\n      break;\n    }\n\n    case 'ArrowLeft': {\n      await moverGame('moveLeft');\n      break;\n    }\n\n    case 'ArrowUp': {\n      await moverGame('moveUp');\n      break;\n    }\n\n    case 'ArrowDown': {\n      await moverGame('moveDown');\n      break;\n    }\n\n    default:\n      break;\n  }\n});\n\nlet startPositionX, startPositionY;\n\nconst gameBoard = document.querySelector('.game-field');\n\ngameBoard.addEventListener('touchstart', function (evenet) {\n  startPositionX = evenet.touches[0].clientX;\n  startPositionY = event.touches[0].clientY;\n});\n\ngameBoard.addEventListener('touchmove', async function (evenet) {\n  evenet.preventDefault();\n\n  if (game.getStatus() !== 'start' || !isUseEventListener) {\n    return;\n  }\n\n  const currentX = evenet.touches[0].clientX;\n  const currentY = evenet.touches[0].clientY;\n\n  const diffX = currentX - startPositionX;\n  const diffY = currentY - startPositionY;\n\n  if (Math.abs(diffX) > Math.abs(diffY)) {\n    if (diffX > 50) {\n      await moverGame('moveRight');\n      isUseEventListener = false;\n    } else if (diffX < -50) {\n      await moverGame('moveLeft');\n      isUseEventListener = false;\n    }\n  } else {\n    if (diffY > 50) {\n      await moverGame('moveDown');\n      isUseEventListener = false;\n    } else if (diffY < -50) {\n      await moverGame('moveUp');\n      isUseEventListener = false;\n    }\n  }\n});\n\ngameBoard.addEventListener('touchend', function () {\n  startPositionX = null;\n  startPositionY = null;\n  isUseEventListener = true;\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nconst randomizer = (state) => {\n  const stateRow = Math.floor(Math.random() * 4);\n  const stateColumn = Math.floor(Math.random() * 4);\n\n  if (state[stateRow][stateColumn] === 0) {\n    return [stateRow, stateColumn];\n  } else {\n    return randomizer(state);\n  }\n};\n\nconst randomNumber = () => {\n  const random = Math.floor(Math.random() * 10) + 1;\n\n  if (random <= 1) {\n    return 4;\n  } else {\n    return 2;\n  }\n};\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.score = 0;\n    this.status = 'none';\n  }\n\n  async gameAdderItem(addWith = '') {\n    const startGameAdder = async () => {\n      const [stateRow, stateColumn] = randomizer(this.initialState);\n\n      this.initialState[stateRow][stateColumn] = randomNumber();\n    };\n\n    const isItemsZero = this.initialState.reduce((prevItem, currentItem) => {\n      return (\n        prevItem +\n        currentItem.reduce((prevItem1, currentItem1) => {\n          return prevItem1 + (currentItem1 === 0 ? 1 : 0);\n        }, 0)\n      );\n    }, 0);\n\n    if (addWith === 'start') {\n      await startGameAdder();\n      await startGameAdder();\n    } else if (isItemsZero >= 1) {\n      await startGameAdder();\n    }\n  }\n\n  async moveLeft() {\n    const tempState = this.initialState;\n\n    const goToLeft = async () => {\n      this.initialState = this.initialState.map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        const result = [...numberItem, ...zeroItem];\n\n        for (let i = 0; i < 3; i++) {\n          if (result[i] === result[i + 1] && result[i] !== 0) {\n            result[i] = result[i] + result[i + 1];\n            this.score += result[i];\n            result[i + 1] = 0;\n            i = i + 1;\n          }\n        }\n\n        return result;\n      });\n    };\n\n    const goToLefttLast = async () => {\n      this.initialState = this.initialState.map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        return [...numberItem, ...zeroItem];\n      });\n    };\n\n    await goToLeft();\n    await goToLefttLast();\n\n    if (tempState.toString() === this.initialState.toString()) {\n      return;\n    }\n\n    await this.gameAdderItem();\n  }\n  async moveRight() {\n    const tempState = this.initialState;\n\n    const goToRight = async () => {\n      this.initialState = this.initialState.map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        const result = [...zeroItem, ...numberItem];\n\n        for (let i = 3; i > 0; i--) {\n          if (result[i] === result[i - 1] && result[i] !== 0) {\n            result[i] = result[i] + result[i - 1];\n            this.score += result[i];\n            result[i - 1] = 0;\n            i = i - 1;\n          }\n        }\n\n        return result;\n      });\n    };\n\n    const goToRightLast = async () => {\n      this.initialState = this.initialState.map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        return [...zeroItem, ...numberItem];\n      });\n    };\n\n    await goToRight();\n    await goToRightLast();\n\n    if (tempState.toString() === this.initialState.toString()) {\n      return;\n    }\n\n    await this.gameAdderItem();\n  }\n  async moveUp() {\n    const tempState = this.initialState;\n\n    const goToTop = async () => {\n      const columnsItems = [\n        this.initialState.map((item) => item[0]),\n        this.initialState.map((item) => item[1]),\n        this.initialState.map((item) => item[2]),\n        this.initialState.map((item) => item[3]),\n      ].map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        const result = [...numberItem, ...zeroItem];\n\n        for (let i = 0; i < 3; i++) {\n          if (result[i] === result[i + 1] && result[i] !== 0) {\n            result[i] = result[i] + result[i + 1];\n            this.score += result[i];\n            result[i + 1] = 0;\n            i = i + 1;\n          }\n        }\n\n        return result;\n      });\n\n      this.initialState = [\n        columnsItems.map((item) => item[0]),\n        columnsItems.map((item) => item[1]),\n        columnsItems.map((item) => item[2]),\n        columnsItems.map((item) => item[3]),\n      ];\n    };\n\n    const goToTopLast = async () => {\n      const columnsItems = [\n        this.initialState.map((item) => item[0]),\n        this.initialState.map((item) => item[1]),\n        this.initialState.map((item) => item[2]),\n        this.initialState.map((item) => item[3]),\n      ].map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        return [...numberItem, ...zeroItem];\n      });\n\n      this.initialState = [\n        columnsItems.map((item) => item[0]),\n        columnsItems.map((item) => item[1]),\n        columnsItems.map((item) => item[2]),\n        columnsItems.map((item) => item[3]),\n      ];\n    };\n\n    await goToTop();\n    await goToTopLast();\n\n    if (tempState.toString() === this.initialState.toString()) {\n      return;\n    }\n\n    await this.gameAdderItem();\n  }\n  async moveDown() {\n    const tempState = this.initialState;\n\n    const goToDown = async () => {\n      const columnsItems = [\n        this.initialState.map((item) => item[0]),\n        this.initialState.map((item) => item[1]),\n        this.initialState.map((item) => item[2]),\n        this.initialState.map((item) => item[3]),\n      ].map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        const result = [...zeroItem, ...numberItem];\n\n        for (let i = 3; i > 0; i--) {\n          if (result[i] === result[i - 1] && result[i] !== 0) {\n            result[i] = result[i] + result[i - 1];\n            this.score += result[i];\n            result[i - 1] = 0;\n            i = i - 1;\n          }\n        }\n\n        return result;\n      });\n\n      this.initialState = [\n        columnsItems.map((item) => item[0]),\n        columnsItems.map((item) => item[1]),\n        columnsItems.map((item) => item[2]),\n        columnsItems.map((item) => item[3]),\n      ];\n    };\n\n    const goToDownLast = async () => {\n      const columnsItems = [\n        this.initialState.map((item) => item[0]),\n        this.initialState.map((item) => item[1]),\n        this.initialState.map((item) => item[2]),\n        this.initialState.map((item) => item[3]),\n      ].map((item, index) => {\n        const zeroItem = item.filter((num) => num === 0);\n        const numberItem = item.filter((num) => num !== 0);\n\n        return [...zeroItem, ...numberItem];\n      });\n\n      this.initialState = [\n        columnsItems.map((item) => item[0]),\n        columnsItems.map((item) => item[1]),\n        columnsItems.map((item) => item[2]),\n        columnsItems.map((item) => item[3]),\n      ];\n    };\n\n    await goToDown();\n    await goToDownLast();\n\n    if (tempState.toString() === this.initialState.toString()) {\n      return;\n    }\n\n    await this.gameAdderItem();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  setStatus() {\n    if (this.initialState.some((items) => items.includes(2048))) {\n      if (this.status !== 'win') {\n        this.status = 'win';\n      }\n\n      return this.status;\n    }\n\n    let isGamingTime = false;\n\n    this.initialState.forEach((item, index) => {\n      const zeroItem = item.filter((num) => num === 0);\n      const numberItem = item.filter((num) => num !== 0);\n\n      const result = [...numberItem, ...zeroItem];\n\n      for (let i = 0; i < 3; i++) {\n        if (result[i] === result[i + 1] && result[i] !== 0) {\n          isGamingTime = true;\n        }\n      }\n\n      for (let i = 3; i > 0; i--) {\n        if (result[i] === result[i - 1] && result[i] !== 0) {\n          isGamingTime = true;\n        }\n      }\n    });\n\n    [\n      this.initialState.map((item) => item[0]),\n      this.initialState.map((item) => item[1]),\n      this.initialState.map((item) => item[2]),\n      this.initialState.map((item) => item[3]),\n    ].forEach((item, index) => {\n      const zeroItem = item.filter((num) => num === 0);\n      const numberItem = item.filter((num) => num !== 0);\n\n      const result = [...numberItem, ...zeroItem];\n\n      for (let i = 0; i < 3; i++) {\n        if (result[i] === result[i + 1] && result[i] !== 0) {\n          isGamingTime = true;\n        }\n      }\n\n      for (let i = 3; i > 0; i--) {\n        if (result[i] === result[i - 1] && result[i] !== 0) {\n          isGamingTime = true;\n        }\n      }\n    });\n\n    this.initialState.forEach((item) => {\n      if (item.includes(0)) {\n        isGamingTime = true;\n      }\n    });\n\n    if (isGamingTime) {\n      return this.status;\n    }\n\n    this.status = 'lose';\n\n    return this.status;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  async start() {\n    await this.gameAdderItem('start');\n    this.status = 'start';\n  }\n\n  /**\n   * Resets the game.\n   */\n  async restart() {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.start();\n    this.score = 0;\n    this.status = 'start';\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$startPositionX","$09e991522ca7e64e$var$startPositionY","$a5fd07fa01589658$var$randomizer","state","stateRow","Math","floor","random","stateColumn","$a5fd07fa01589658$var$randomNumber","$09e991522ca7e64e$var$game","constructor","initialState","score","status","gameAdderItem","addWith","startGameAdder","isItemsZero","reduce","prevItem","currentItem","prevItem1","currentItem1","moveLeft","tempState","goToLeft","map","item","index","zeroItem","filter","num","result","i","goToLefttLast","toString","moveRight","goToRight","goToRightLast","moveUp","goToTop","columnsItems","goToTopLast","moveDown","goToDown","goToDownLast","getScore","getState","setStatus","some","items","includes","isGamingTime","forEach","getStatus","start","restart","$09e991522ca7e64e$var$rows","Array","from","document","querySelectorAll","row","$09e991522ca7e64e$var$score","querySelector","$09e991522ca7e64e$var$isLoser","$09e991522ca7e64e$var$isWiner","$09e991522ca7e64e$var$isStarter","$09e991522ca7e64e$var$setAllGameBoard","itemsFromGame","statusGame","textContent","indexRow","itemField","intexItemField","className","$09e991522ca7e64e$var$start","addEventListener","classList","contains","remove","add","$09e991522ca7e64e$var$isUseEventListener","$09e991522ca7e64e$var$moverGame","moveToGamePosition","documentElement","evenet","key","$09e991522ca7e64e$var$gameBoard","touches","clientX","event","clientY","preventDefault","currentX","currentY","diffX","diffY","abs"],"version":3,"file":"index.c28535d3.js.map"}